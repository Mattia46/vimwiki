//AUTOCOMPLETE PRODUCT
{{{javascript
function createFilterFor(query) {
	var lowercaseQuery = angular.lowercase(query);
	return function filterFn(item) {
	// this method allows me to filter using more than one word (in this
	//case 3 word, but could be more)
		var words = lowercaseQuery.split(' ');
		var word1 = lowercaseQuery.split(' ')[0];
		if(words.length > 2){
			var word2 = lowercaseQuery.split(' ')[1];
			var word3 = lowercaseQuery.split(' ')[2];
			return (item.value.indexOf(word1) !== -1) && (item.value.indexOf(word2) !== -1) && (item.value.indexOf(word3) !== -1);
		} else if(words.length > 1){
			var word2 = lowercaseQuery.split(' ')[1];
			return (item.value.indexOf(word1) !== -1) && (item.value.indexOf(word2) !== -1);
		} else {
			return (item.value.indexOf(word1) !== -1);
		}

	};
}
  function querySearch (query) {
    var results = query ? newArrayList.filter( createFilterFor(query)  ) : newArrayList, deferred;
    self.result = results;
    if (self.simulateQuery) {
      return deferred.promise;
    } else {
      return results;
    }
  }

  // This function is mapping every item in the object and assigning it to a var
  function loadAll() {
    var allItems = array;
    return allItems.map( function (item) {
        item.value = item.name.toLowerCase();
        return item;
        });
  }
  }}}

Two options to retrieve the array:

* If you already have the array in your scope:
{{{javascript
  var newArrayList = loadAll();
  self.querySearch = querySearch;
  }}}

* If you want retrieve the array in the DB:
{{{javascript
  (function(){
   self.isLoading = true; // Starts the loading spin in the view
   restService.get(appConfig.restNewWs, 'url').then(function(item){
       var array = item;
       var newArrayList = loadAll();
       self.querySearch = querySearch;
       }).finally(function(){
         self.isLoading = false; // ends the loading sping
         });
   })();
  }}}

{{{html
  <md-autocomplete
    tabindex="{{item.index}}"
    class="search-purchase-first search-location-dialog"
    md-items="item in ctrl.querySearch(ctrl.searchText)"
    md-search-text="ctrl.searchText"
    md-selected-item = 'ctrl.product'
    md-selected-item-change='ctrl.methodToRun()'
    placeholder="Search Products"
    md-item-text='item.name' style="margin: 0;">
    <md-item-template>
    <span md-highlight-text="ctrl.searchText" md-highlight-flags="^i">{{item.name}}</span>
    </md-item-template>
    </md-autocomplete>

  }}}
  %% DEBUG: make sure the md-items='item in ctrl.querySearch(ctrl.searchText)' is
  %% in the same line, without indentation
