%% Two ways to get the refs value:
 %% - a: from Input component
 %% - b: from the input field inside the same component

{{{Javascript
class App extends React.Component {
  constructor(){
    super();
    this.state = {a: '', b: ''}
  }
  update(){
    this.setState({
      a: this.a.refs.input.value,
      b: this.refs.b.value,
      c: this.c.value
    })
  }
  render(){
    return (
      <div>
        <Input ref={ component => this.a = component} update={this.update.bind(this)} /> // ref defines that what passed
        // insied is a component, so this.a refers to the component Input. So the rest is how Input calls its element
        {this.state.a}
        <hr />
        <Input ref={ node => this.c = node} update={this.update.bind(this)} /> // ref defines that what passed
        // insied is a node, so this.c refers to this specific node.
        {this.state.c}
        <hr />
        <input ref="b" type="text" onChange={this.update.bind(this)} /> // basic way. Instead on e.target.value we
        //defined this input as a "b" so would be this.refs.b.value
          {this.state.b}
      </div>
    )
  }
}

class Input extends React.Component {
  render(){
    return <div><input ref="input" type="text" onChange={this.props.update}/></div>
  }
}
}}}
