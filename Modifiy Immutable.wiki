{{{javascript
mocha.setup('bdd');
const expect = chai.expect;

class Todo {
  constructor(title="", text="", completed=false) {
    this.id = (+new Date() + Math.floor(Math.random() * 999999)).toString(36);
    this.title = title;
    this.text = text;
    this.completed = completed;
  }
}

function addTodo(todos, todo) {
  return todos.set(todo.id, todo);
}

function removeTodo(todos, todo) {
  return todos.delete(todo.id, todo);
}

function updateTodo(todos, todo) {
  return todos.update(todo.id, todo => todo);
}

function mergeTodos(todos, todos2) {
  return todos.merge(todos2);
}

function clearAll(todos) {
  return todos.clear();
}

describe('Modifying an Immutable.js Map()', () => {
  it('should add todo to state', () => {

    const todo = new Todo("Todo 1", "I'm a todo!", false);
    let todos = Immutable.Map();
    todos = addTodo(todos, todo);

    expect(todos.get(todo.id)).to.equal(todo);
  });

  it('should remove todo from state', () => {

    const todo = new Todo("Todo 1", "I'm a todo!", false);
    let todos = Immutable.Map();
    todos = addTodo(todos, todo);

    expect(todos.get(todo.id)).to.equal(todo);
    todos = removeTodo(todos, todo);
    expect(todos.get(todo.id)).to.be.undefined;
  });

  it('should update todo', () => {
    const todo = new Todo("Todo 1", "I'm a todo!", false);
    let todos = Immutable.Map();
    todos = addTodo(todos, todo);

    todo.title = "New Title"

    todos = updateTodo(todos, todo);
    expect(todos.get(todo.id).title).to.equal("New Title");

  });

  it('should remove all todos', () => {

    var todos = Immutable.Map();

    _.each(_.range(10), (index) => {
      todos = addTodo(todos, new Todo("Todo " + index, "I'm a todo!", false));
    });

    expect(todos.size).to.equal(10);

    todos = clearAll(todos); 
    expect(todos.size).to.equal(0);
  });

  it('should merge todos', () => {

    var todos = Immutable.Map();
    var todos2 = Immutable.Map();

    _.each(_.range(10), (index) => {
      todos = addTodo(todos, new Todo("Todo " + index, "I'm a todo!", false));
    });

    _.each(_.range(10), (index) => {
      todos2 = addTodo(todos2, new Todo("Todo " + index, "I'm a todo!", false));
    });

    todos = mergeTodos(todos, todos2);
    expect(todos.size).to.equal(20);
  });
});

mocha.run();
}}}

{{{Html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Learning Immutable.js</title>
  <meta name="description" content="Navigating and Querying an Immutable.js Map()">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/mocha/2.3.3/mocha.min.css"></link>
  <script src="//cdnjs.cloudflare.com/ajax/libs/mocha/2.3.3/mocha.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/chai/3.3.0/chai.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/immutable/3.8.1/immutable.js"></script>
  <script src="//cdn.rawgit.com/lodash/lodash/3.0.1/lodash.min.js"></script>
</head>
<body>

  <div id="mocha"></div>
</body>
</html>
}}}
